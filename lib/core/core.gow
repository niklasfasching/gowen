(def defmacro (macro [name args & body] `(def ~name (macro ~name ~args ~@body))))

(defmacro defn [name args & body] `(def ~name (fn ~name ~args ~@body)))

(defmacro do [& body] `((fn [] ~@body)))

(defmacro let [bindings & body]
  (if (>= (count bindings) 2)
    `((fn [~(first bindings)]
        (let ~(rest (rest bindings)) ~@body)) ~(second bindings))
    `(do ~@body)))

(defmacro not [x] `(if ~x false true))

(defmacro and [x & xs]
  `(let [and# ~x]
     (if and#
       ~(if (>= (count xs) 1) `(and ~@xs) 'and#)
       and#)))

(defmacro or [x & xs]
  `(let [or# ~x]
     (if or#
       or#
       ~(if (>= (count xs) 1) `(or ~@xs) 'or#))))

(defn reduce [f accumulator xs]
  (let [r (fn r [f accumulator xs]
            (if (= (count xs) 0)
              accumulator
              (r f (f accumulator (first xs)) (rest xs))))]
    (r f accumulator (seq xs))))

(defn map [f xs]
  (apply list (reduce (fn [xs x] (conj xs (f x))) [] xs)))

(defn filter [f xs]
  (apply list (reduce (fn [xs x] (if (f x) (conj xs x) xs)) [] xs)))

(defn printf [fmt & args] (print (apply format (concat [fmt] args))))

(defn first [coll]
  ((fn [coll] (if (>= (count coll) 1) (get coll 0) nil)) (seq coll)))

(defn second [coll] (first (rest coll)))

(defn rest [coll]
  ((fn [coll] (if (>= (count coll) 1) (slice coll 1 (count coll)) nil))
   (seq coll)))

(defn assoc [m & kvs] (merge m (apply hashmap kvs)))

(defn string? [x] (= (type x) "string"))
(defn number? [x] (= (type x) "number"))
(defn sequential? [x] (or (= (type x) "list") (= (type x) "vector")))

(defmacro cond [& clauses]
  (if (> (count clauses) 0)
    `(if ~(first clauses)
       ~(if (>= (count clauses) 2)
          (second clauses)
          (throw "wrong number of clauses for cond - must be even"))
       (cond ~@(rest (rest clauses))))
    '(throw "cond did not match")))

;; (defn type [x]
;;   (let [t (format "%T" x)]
;;     (cond
;;       (= t "string") "string"
;;       (= t "float64") "number"
;;       (= t "map[interface {}]interface {}") "hashmap"
;;       (= t "gowen.Vector") "vector"
;;       (= t "gowen.KeywordNode") "keyword"
;;       (= t "gowen.SymbolNode") "symbol"
;;       (or (= t "[]interface {}")
;;           (= t "gowen.List")) "list"
;;       true t)))

(defn vec [xs] (apply vector xs))

(defn name [x]
  (cond
    (or (= (type x) "symbol") (= (type x) "string")) (format "%s" x)
    (= (type x) "keyword") (let [x (format "%s" x)] (subs x 1 (count x)))
    (throw (format "cannot get name for %s" x))))

(defn repeat [n x]
  (let [repeat (fn repeat [n x xs]
                 (if (= n 0)
                   xs
                   (repeat (- n 1) x (conj xs x))))]
    (repeat n x [])))

(defmacro time/measure [& body]
  `(let [start# (time/now)
         result# (do ~@body)
         ms# (/ (time/since start#) 1e6)]
     (print "took" ms# "ms")
     result#))

(defmacro -> [it & forms]
  (if (>= (count forms) 1)
    (let [form (first forms)
          it (if (sequential? form)
               `(~(first form) ~it ~@(rest form))
               (list form it))]
      `(-> ~it ~@(rest forms)))
    it))

(defmacro doto [it & forms]
  `(let [it# ~it]
     ~@(map (fn [f]
              (if (sequential? f)
                `(~(first f) it# ~@(rest f))
                `(~f it#)))
            forms)
     it#))
