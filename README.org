* yet another lisp
A lisp that tries to look like clojure with topological sorting by dependencies before evaluation.
Run with =go run cmd/gowen/*= or install with =go install github.com/niklasfasching/gowen/cmd/gowen=
** features
*** destructuring
#+BEGIN_SRC clojure
(let [[x & xs :as original] [1 2 3]]
  [x xs original])
;; [1 (2 3) [1 2 3]]

(let [{:keys [x y z] :as m} {:x 1 :y 2}]
  [x y m])
;; [1 2 {:y 2, :x 1}]

(let [{{[bar & bars] :bars} :foo} {:foo {:bars ["bar" "bar" "bar"]}}]
  [bar bars])
;; ["bar" ("bar" "bar")]
#+END_SRC

*** seamless go interop
Conversion from/to go is handled automatically.
Go packages can be added to gowen via generate - check out =cmd/generate= and =lib/core= packages for that.
#+BEGIN_SRC go
var values = map[string]interface{}{
	"add":   func(x, y int) int { return x + y },
	"time/now":   time.Now,
}
gowen.Register(values, "(def x 42)")
#+END_SRC

#+BEGIN_SRC clojure
(print x)
;; 42

(add x 42.0)
;; 84

(time/now)
;; time.Time{wall:0xbef3400896edba59, ext:2270378317, loc:(*time.Location)(0x704160)}
(type (time/now))
;; "time.Time"

;; field & method access via dot symbols

(.year (time/now)) ; automatic capitalization - translates to .Year()
;; 2018

(let [out (-> (exec/command "echo" "Hello World!")
              .combinedOutput)]
  (format "%s" out))
;; "Hello World!\n"
#+END_SRC
*** macros & quasiquote
#+BEGIN_SRC clojure
(defmacro foo-defn [name args & body]
  `(defn ~(symbol (str "foo" name)) ~args ~@body))
(foo-defn bar [] (print "foobar!"))
(foobar)
;; foobar!
#+END_SRC
*** order independent evaluation
=EvalTopological= sorts toplevel forms before evaluation.
As global symbols can only be defined at the toplevel (and cannot be altered) this takes care
of e.g. "circular" dependencies between files. No real use case for that yet, just found it interesting.
#+BEGIN_SRC clojure
;; e.g. save as x.gow and run via gowen ./x.gow
(def bar (+ foo 1))
(def foo 1)

(print foo bar)
;; 1 2
#+END_SRC
** non features
*** performance
- pretty > fast
  #+BEGIN_SRC clojure
  ;; gowen is crazy slow! just summing a few number takes a second :D
  (time/measure (reduce + 0 (repeat 10000 1)))
  ;; took 1254.757247 ms
  ;; 10000
  #+END_SRC
* resources
- https://github.com/jcla1/gisp
- https://blog.burntsushi.net/type-parametric-functions-golang/
- [[https://web.wpi.edu/Pubs/ETD/Available/etd-090110-124904/unrestricted/jshutt.pdf][fexprs as the basis of Lisp function application]]
- L.I.S.P.: Lisp In Small Pieces
- http://axisofeval.blogspot.com/2013/04/a-quasiquote-i-can-understand.html
